
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Geoffrey's Template for NodeJs Apps</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet">
    <!--link rel="icon" type="image/png" href="/favicon.ico"/-->
    <link rel="icon" href="data:,">

  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Project name</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#wan">Button1</a></li>
            <li><a href="#too">Button2</a></li>
            <li><a href="#phree">Button3</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>
    <div class="container">
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    </div><!-- /.container -->


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
    <script>window.jQuery || document.write('<script src="js/jquery.min.js"><\/script>')</script>
    <script src="js/bootstrap.min.js"></script>
    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var vID = '0gNY0KZ2nyY';
      var tag = document.createElement('script');

      tag.src = 'https://www.youtube.com/iframe_api';
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      var newRequest = true;
      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      var socket = io('http://localhost:5000');
      
      socket.on('play', function(ts) {
        console.log(ts);
        newRequest = false;
        player.seekTo(ts);
      });

      socket.on('pause', function(ts) {
        console.log(ts);
        newRequest = false;
        player.seekTo(ts);
      });

      socket.on('buffer', function(ts) {
        console.log(ts);
        newRequest = false;
        player.seekTo(ts);
      });
      
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '480',
          width: '720',
          videoId: vID,
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          },
          playerVars: {
            //'controls':0,
            //'disablekb':1,
            'modestbranding':1,
            'rel':0
          }
        });
        console.log("what the hell is going on");
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
          //event.target.playVideo();
            console.log("video ready")
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      function onPlayerStateChange(event) {
        console.log(event.data);
        //console.log(event.target.getCurrentTime());
        console.log(newRequest);
        if (event.data == YT.PlayerState.PLAYING && newRequest) {
            socket.emit('playEvent', {ts: event.target.getCurrentTime(), b: newRequest}); 
        }
        if (event.data == YT.PlayerState.PAUSED && newRequest) {
            socket.emit('pauseEvent', {ts: event.target.getCurrentTime(), b: newRequest});
        }
        if (event.data == YT.PlayerState.BUFFERING && newRequest) {
            socket.emit('bufferEvent', {ts: event.target.getCurrentTime(), b: newRequest});
        }
        newRequest = true;
      }

    
    </script>
  </body>
</html>
